Scripts / Atalhos {
    crlt + L Limpar a tela
    .exit - sair do programa
    typeof - mostra qual o tipo primitivo
    variavel.toFixed(2) - Declara a quantidade de casas do numero dentro do parenteses, no caso do exemplo seriam 2 casas a mais.
    variavel.toFixed(2).replace('.', ',') - Troca o ponto por vírgula
    n1.toLocaleString('pt-BR', {Style: 'currency', currency: 'BRL'}) - O valor ficar em Real brasileiro, se trocar a ultima abreviação por USD fica em Dolar ou EUR fica em Euro.
}

MENSAGENS COM CONSOLE.
console.log(` ${} `) - Mostrar uma mensagem informativa.
console.debug() - Mostrar somente detalhes de um desenvolvimento.
console.warn() - Um tipo de mensagem que merece um pouco mais de autenção.
console.error() - Um tipo de mensagem preocupante, que está acontecendo alguma coisa problematica dentro da aplicação.

Mostrar a data/hora/dia atuais:
var agora = new Date ()
var hora = agora.getHours() / // agora.getDay .get...  variavel.GETopção

mkdir - criar o nome
cd + nome - abrir o nome do arquivo

yarn init -y* cria o  arquivo - package.json 
Code . - abre o arquivo com VS

instalar e Executar o Sucrase:
yarn add sucrase -D
npx sucrase-node ./src/server.js 

instalar e executar o Eslint:
yarn add eslint -D
yarn eslint --init


Prettier - Garante o embezamento do Códigos
instar o Prettier:
yarn add prettier eslint-config-prettier eslint-plugin-prettier -D

Identifição de erros no código:
yarn eslint --fix src --ext .js

limpar cache do yarn: 
yarn cache clean

Esqueleto básico do express

const express = require("express");

const server = express();

server.listen(3000); // Porta que eu quero trabalhar
// Normalmente utiliza-se as portas 3000 / 5000 / 8000 / 8080


Variavel REQ - Requisição
Variavel RES - Resposta 
res.send() - resposta 



Esqueleto básico do express : 

const express = require("express");

const server = express();



server.listen(3000); // Porta que eu quero trabalhar
// Normalmente utiliza-se as portas 3000 / 5000 / 8000 / 8080


Variavel REQ - Resquest ou Requisição
Variavel RES - Resposta 
res.send() - resposta 

Query Params = coloca o parametro e dps o valor dele, primeiro com "?" e os próximo com "&", São opcionais
?nome = jefferson&idade=28 

Route Params - parametros de rota, são obrigatorios, estão integrados a rota e a rota vai responder ou não se tiver aquele parametro
/hello/:nomedoparametro

Semantica:
Qualquer error começados em 2xx - Indica que a requisição foi processada com sucesso.
Qualquer error começados em 3xx- indica ao cliente uma ação a ser tomada para que a requisição possa ser concluída.
Qualquer error começados em 4xx - indica erros na requisição causados pelo cliente.
Qualquer error começados em 5xx - indica que a requisição não foi concluida devido a erros ocorridos no servidor

GET - http://api.com/customers - Lista todos os recursos.
GET -  http://api.com/customers/1 - Lista um recurso especifico.
POST - http://api.com/customers - Cria um novo Recurso
PUT - http://api.com/customers/1 - Atualiza um recurso existente.
DELETE - http://api.com/customers/1 - Exclui um Recurso existente



Códigos  /   DESCRIÇÃO   / QUANDO UTILIZAR 

200 - OK  - Em requisições GET, PUT e DELETE executadas com sucesso.
201 - CREATED - Em requisições POST, quando um novo recurso é criado com sucesso.
206 - Partial Content - Em requisições GET que devolvem apenas uma parte do conteúdo de um recurso.
302 - Found - Em requisições feitas às URIs antigas, foram alteradas
400 - Bad Request - Em requisições cujas informações enviadas pelo cliente sejam inválidas
401 - Unauthorized - Em requisições que exigem autenticação, mas seus dados não foram fornecidos.
403 - Forbidden - Em requisições que o cliente não tem permissão de acesso ao recurso solicitado.
404 - Not Found - Em requisições cuja a URI de um determinado recurso seja inválida
405 - Method Not Allowed - Em requisições cujo o método HTTP indicado pelo cliente não seja suportado
406 - Not Acceptable - Em requisições cujo formato da representação do recurso requisitado pelo cliente não seja suportado.
415 - Unsupported Media Type - Em requisições cujo formato da representação do recurso enviado pelo cliente não seja suportado.
429 - Too Many Request - No caso do servidor ter um limite de requisições que pode ser feita por um cliente, e ele já tiver sido atingindo.
500 - Internal Server Error - Em requisições onde um erro tenha ocorrido no servidor.
503 - Service Unavailable - Em requisições feitas a um serviço que está fora do ar, para manutenção ou sobrecarga.

Stringfy - vai transformar um objeto num formato json
Splice vai remover um objeto em uma posição especifica, no caso na quantidade 1, quando localizar o Index
Middlewares - camada que voce adiciona entre o express e a sua aplicação, realiza uma interceptação e faz uma lógica em função dessa interceptação, podendo aprovar que a requisição passe para a proxima etapa ou não.

Scopos - Consultas que você já deixa pré programadas com nomes.